#<----This document covers basic commands of Kubernetes-------->


kubectl get nodes

docker login
docker pull <image-name>

kubectl run <pod-name> --image=<image-name>
kubectl run tomcat2 --image=tomcat


#<---pod----->
#Extract Pod definition file
kubectl get pod <pod-name> -o yaml > pod-definition.yaml

kubectl create -f pod-definition.yml
kubectl get pods
kubectl get pods -o wide
kubectl describe pods
kubectl describe pod <pod-name>
kubectl delete pod <pod-name>


#<---- deployment----->
kubectl create deployment tomcat4 --image=tomcat
kubectl delete deployment <deployment-name>
kubectl scale deployment tomcat4  --replicas=3
kubectl autoscale deployment tomcat4 --min=10 --max=15
kubectl create -f  deployment-definition.yml 
kubectl rollout status deployment/tomcat4
kubectl rollout history deployment/tomcat4

#<--to update deployment--->
kubectl apply -f deployment-definition.yml
kubectl set image deploment/myapp-deployment \ nginx=ngnix:1.9.1
kubectl rollout undo deploment/myapp-deployment

#<----Replication Controller--->

kubectl create -f  rc-definition.yml
kubectl replace -f  rc-definition.yml
kubectl get replicationController



#<-------Replica Set -------------->

kubectl create -f  replicaset-definition.yml 
kubectl get replicaset
kubectl replace -f  rc-definition.yml
kubectl scale --replicas=6  -f  rc-definition.yml
kubectl delete replicaset  tomcat-rs


kubectl  get all 


#<----Services ---->

kubectl describe service <service-name>
kubectl get services
minikube start
minikube service list
kubectl expose deployments tomcat4 --port=80 --type=LoadBalancer



<---Namespace---->

kubectl get pods --namespace=dev
kubectl create -f pod-definition.yml --namespace=dev
kubectl create -f namespace-dev.yml
kubectl create namespace dev


#Switch to namespace
kubectl config set-context $(kubectl config current-context) --namespace=dev

kubectl get pods --all-namespaces


<---Configuration---->
kubectl create configmap \  # imperative way
	app-config --from-literal=APP_COLOR=blue \
			   --from-literal=APP_MOD=prod


kubectl create  configmap \ # imperative way 
	app-config --from-file=app_config.properties
	
	
kubectl create -f config-map.yml # declarative way


kubectl get configmaps

kubectl describe configmaps

<---secret---->
1) create secret and then inject into pod
kubectl create secret generic \
        app-secret --from-literal=DB_HOST=mysql \
				   --from-literal=DB_USER=root
				   --from-literal=DB_PASSWRD=password

kubectl create secret generic \
        app-secret --from-file=app_secret.properties
		
		
app_secret.properties
DB_HOST: mysql
DB_USER: root
DB_PASSWRD: password
		

$echo -n 'mysql' | base64

$echo -n 'JJHHK' | base64 --decode


kubectl get secrets

kubectl describe secrets


kubectl get secret app-secret -o yaml 

<---Service Account----->	

kubectl create serviceaccount dashboard-sa

kubectl get serviceaccount

kubectl describe serviceaccount dashboard-sa

kubectl describe secret dashbo-ard-sa-token-kbdm
